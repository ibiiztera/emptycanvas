/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package be.ibiiztera.md.pmatrix.starbuck02;

import be.ibiiztera.md.pmatrix.pushmatrix.*;
import be.ibiiztera.pmatrix.extras.RepresentableConteneur;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.PaintContext;
import java.awt.Point;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author Manuel DAHMEN
 */
public class QuadTexture extends javax.swing.JFrame implements TreeSelectionListener, PaintControles {

    private final PreviewControleur previewControlleur;

    /**
     * Creates new form QuadTexture
     */
    public QuadTexture(PreviewControleur pc) {
        previewControlleur = pc;

        initComponents();




        //Where the tree is initialized:
        jTree1.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);

        //Listen for when the selection changes.
        jTree1.addTreeSelectionListener(this);


        preview.setView(previewControlleur);
        preview.run();



        preview.setView(pc);

    }

    @Override
    public void valueChanged(TreeSelectionEvent e) {
//Returns the last path element of the selection.
//This method is useful only when the selection model allows a single selection.
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();

        if (node == null) //Nothing is selected.     
        {
            return;
        }

        Object nodeInfo = node.getUserObject();
        if (node.isLeaf() && node.getUserObject() instanceof Polygone) {
            Polygone polygone = (Polygone) nodeInfo;
            display(polygone);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jScrollPane2 = new javax.swing.JScrollPane();

        DefaultMutableTreeNode top = new DefaultMutableTreeNode("Scene");
        createNodes(top);
        jTree1 = 
        new javax.swing.JTree(top);
        preview = new be.ibiiztera.md.pmatrix.starbuck02.RenderPreviewPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setMaximumSize(new java.awt.Dimension(2000, 2000));

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jEditorPane1.setPreferredSize(null);
        jScrollPane1.setViewportView(jEditorPane1);

        jTree1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                clicObjet(evt);
            }
        });
        jScrollPane2.setViewportView(jTree1);

        javax.swing.GroupLayout previewLayout = new javax.swing.GroupLayout(preview);
        preview.setLayout(previewLayout);
        previewLayout.setHorizontalGroup(
            previewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );
        previewLayout.setVerticalGroup(
            previewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(preview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE))
                    .addComponent(preview, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clicObjet(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clicObjet
        int[] selectionRows = jTree1.getSelectionRows();
        if (selectionRows.length > 0) {
            TreePath pathForRow = jTree1.getPathForRow(selectionRows[0]);
            Object[] path = pathForRow.getPath();
            for(int i=0; i<path.length; i++)
            {
                Object o = path[i];
                if (o instanceof DefaultMutableTreeNode && ((DefaultMutableTreeNode) o).getUserObject() instanceof Representable) {
                Representable r = (Representable) (((DefaultMutableTreeNode) o).getUserObject());
                jEditorPane1.setText(r.toString());
                if(r instanceof Polygone)
                    display((Polygone )r);
                }
            }
        }
    }//GEN-LAST:event_clicObjet

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QuadTexture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QuadTexture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QuadTexture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuadTexture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                PreviewControleurConcrete pc = new PreviewControleurConcrete();
                pc.definirModele(new Scene());
                new QuadTexture(pc).setVisible(true);

            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTree jTree1;
    private be.ibiiztera.md.pmatrix.starbuck02.RenderPreviewPanel preview;
    // End of variables declaration//GEN-END:variables

    private void createNodes(DefaultMutableTreeNode top) {
        DefaultMutableTreeNode objets = null;
        DefaultMutableTreeNode textures = null;
        DefaultMutableTreeNode cameras = null;

        objets = new DefaultMutableTreeNode("Objets");
        textures = new DefaultMutableTreeNode("Textures");
        cameras = new DefaultMutableTreeNode("Cameras");

        top.add(objets);
        top.add(textures);
        top.add(cameras);

        if (previewControlleur != null && previewControlleur.modele() != null) {
            Iterator<Representable> it = previewControlleur.modele().iterator();
            while (it.hasNext()) {
                Representable next = it.next();

                addObjet(next, objets);
            }
            Camera c = previewControlleur.modele().camera();
            if (c != null) {
                cameras.add(new DefaultMutableTreeNode(c));
            }
        } else {
            DefaultMutableTreeNode err = new DefaultMutableTreeNode("Erreur: objet ==null");
            objets.add(err);

        }


    }

    private void addObjet(Representable next, DefaultMutableTreeNode objets) {
        DefaultMutableTreeNode n = new DefaultMutableTreeNode(next);
        objets.add(n);
        if (next instanceof Polygone) {
            Iterator<Point3D> it2 = ((Polygone) next).getPoints().iterator();
            while (it2.hasNext()) {
                n.add(new DefaultMutableTreeNode(it2.next()));
            }
        }
        if (next instanceof RepresentableConteneur) {
            Iterator<Representable> it = ((RepresentableConteneur) next).iterator();
            while (it.hasNext()) {
                Representable r = it.next();
                addObjet(r, n);
            }
        }
    }

    private void display(Polygone polygone) {
        dessinerControle(preview.getGraphics(), polygone);
    }
    private ArrayList<Representable> rs = new ArrayList<Representable>();

    @Override
    public void add(Representable r) {
        rs.add(r);
    }

    @Override
    public void remove(Representable r) {
        rs.remove(r);
    }

    @Override
    public void dessinerTousLesControles(Graphics g) {
        for (int i = 0; i < rs.size(); i++) {
            if (rs.get(i) instanceof Polygone) {
                Polygone p = (Polygone) rs.get(i);
                for (int j = 0; j < p.getPoints().size(); j++) {
                    Point pt = previewControlleur.getPoint2D(p.getPoints().get(j));
                    g.setColor(Color.blue);
                    g.drawRect(pt.x - 2, pt.y - 2, pt.x + 2, pt.y + 2);
                }

            }
        }
    }
    private Point3D selected = null;

    @Override
    public void dessinerControle(Graphics g, Representable r) {
        if (r instanceof Polygone) {
            Polygone p = (Polygone) r;
            for (int j = 0; j < p.getPoints().size(); j++) {
                Point pt = previewControlleur.getPoint2D(p.getPoints().get(j));
                if (selected == p.getPoints().get(j)) {
                    g.setColor(Color.red);
                } else {
                    g.setColor(Color.blue);
                }
                g.fillRect(pt.x - 2, pt.y - 2, 4, 4);
            }

        }
    }
}
